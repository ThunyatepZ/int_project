import cv2
import numpy as np

def preprocess_image(image_path):
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    """
    try:
        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
        if img is None:
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")

        img = cv2.resize(img, (28, 28))  # Resize ‡πÄ‡∏õ‡πá‡∏ô 28x28
        img = img / 255.0  # Normalize ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        img = np.expand_dims(img, axis=(0, -1))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° batch ‡πÅ‡∏•‡∏∞ channel dimension
        return img
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def predict_number(model, image_path):
    """
    ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
    """
    input_image = preprocess_image(image_path)
    if input_image is None:
        return None

    # üìå ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    prediction = model.predict(input_image)
    predicted_label = np.argmax(prediction)

    print(f"üéØ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏Ñ‡∏∑‡∏≠: {predicted_label}")
    return predicted_label