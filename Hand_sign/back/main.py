import base64
import io
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import numpy as np
import cv2
from PIL import Image
from tensorflow.keras.models import load_model
import joblib

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
digit_model = load_model("modelsave/digit_classifier.h5")  # ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
knn_model = joblib.load('modelsave/knn_model.pkl')  # ‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN
decision_tree_model = joblib.load('modelsave/DT/decision_tree_model.pkl')  # ‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree
scaler = joblib.load('modelsave/scaler.pkl')  # Scaler ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
label_encoder = joblib.load('modelsave/label_encoder.pkl')  # Label Encoder ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏¨‡∏≤ (KNN) ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏¨‡∏≤ (Decision Tree) ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
print("‚úÖ Scaler ‡πÅ‡∏•‡∏∞ Label Encoder ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

app = FastAPI()

# ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ React (Frontend) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Request Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
class ImageData(BaseModel):
    image: str

# ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Request Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏¨‡∏≤
class UserData(BaseModel):
    age: int
    gender: int
    health_condition: int
    fitness_level: int
    duration: int
    intensity: int

# üéØ **API ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ**
@app.post("/predict")
async def predict_digit(data: ImageData):
    try:
        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Base64 -> ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        image_data = base64.b64decode(data.image.split(",")[1])  # ‡∏ï‡∏±‡∏î "data:image/png;base64," ‡∏≠‡∏≠‡∏Å
        image = Image.open(io.BytesIO(image_data)).convert("L")  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale
        image = np.array(image)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array

        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 28x28
        image = cv2.resize(image, (28, 28))  

        # ‚úÖ Normalize ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
        image = image / 255.0
        image = np.expand_dims(image, axis=(0, -1))  # ‡πÄ‡∏û‡∏¥‡πà‡∏° batch ‡πÅ‡∏•‡∏∞ channel dimension

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        result = digit_model.predict(image)
        
        return {"prediction": int(np.argmax(result))}

    except Exception as e:
        return {"error": str(e)}

# üéØ **API ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏¨‡∏≤ (KNN)**
@app.post("/predict_sport")
async def predict_sport_knn(user_data: UserData):
    try:
        user_input = np.array([[user_data.age, user_data.gender, user_data.health_condition, 
                                user_data.fitness_level, user_data.duration, user_data.intensity]])
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        user_input_scaled = scaler.transform(user_input)
        prediction = knn_model.predict(user_input_scaled)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡∏¨‡∏≤
        recommended_sport = label_encoder.inverse_transform(prediction)
        
        return {"Recommended Sport/Activity (KNN)": recommended_sport[0]}
    
    except Exception as e:
        return {"error": str(e)}

# üéØ **API ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏µ‡∏¨‡∏≤ (Decision Tree)**
@app.post("/predict_sport_dt")
async def predict_sport_dt(user_data: UserData):
    try:
        user_input = np.array([[user_data.age, user_data.gender, user_data.health_condition, 
                                user_data.fitness_level, user_data.duration, user_data.intensity]])
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        user_input_scaled = scaler.transform(user_input)
        prediction = decision_tree_model.predict(user_input_scaled)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡∏¨‡∏≤
        recommended_sport = label_encoder.inverse_transform(prediction)
        
        return {"Recommended Sport/Activity (Decision Tree)": recommended_sport[0]}
    
    except Exception as e:
        return {"error": str(e)}